enclave {
    from "sgx_tstdc.edl" import *;
    include "mbedtls/ecp.h"

    trusted {
        include "internal.hpp"

        public size_t ecall_calc_volkey_size();
        public int ecall_create_volume([user_check] mbedtls_ecp_keypair* pubkey, [out, isary] uuid_t sp_uuid_out, [out, size = volkey_size] uint8_t* sealed_volkey, size_t volkey_size);
        public int ecall_mount_volume(size_t uid, [user_check] const mbedtls_ecp_keypair* key, [in, isary] uuid_t sp_uuid_in, [in, size = volkey_size] const uint8_t* sealed_volkey, size_t volkey_size);

        public int ecall_fs_getattr(ino_t ino, [out] struct stat_buffer_t* statbuf);
        public int ecall_fs_lookup(ino_t parent, [in, string] const char* name, [out] fuse_ino_t* ino, [out] struct stat_buffer_t* statbuf);
        public int ecall_fs_mkdir(ino_t parent, [in, string] const char* name, mode_t mode, [out] fuse_ino_t* ino, [out] struct stat_buffer_t* statbuf);
        public int ecall_fs_unlink(fuse_ino_t parent, [in, string] const char *name);
        public int ecall_fs_rmdir(fuse_ino_t parent, [in, string] const char *name);
        public int ecall_fs_open(fuse_ino_t ino, enum open_flag_t flags);
        public int ecall_fs_read(fuse_ino_t ino, [user_check] char* buf, off_t offset, [in, out] size_t* size);
        public int ecall_fs_write(fuse_ino_t ino, [user_check] const char* buf, off_t offset, [in, out] size_t* size);
        public int ecall_fs_flush(fuse_ino_t ino);
        public int ecall_fs_get_dirent_size(fuse_ino_t ino, [out] size_t* entnum);
        public int ecall_fs_get_dirent(ino_t ino, [out, count = count] struct dirent_t* buf, size_t count);
        public int ecall_fs_access(fuse_ino_t ino, int mask);
        public int ecall_fs_create(fuse_ino_t parent, [in, string] const char *name, mode_t mode, [out] fuse_ino_t* ino, [out] struct stat_buffer_t* statbuf);
    };
    untrusted {
        include "bridge.hpp"

        void ocall_load_file([in, string] const char* filename, [out] void** content, [out] ssize_t* size);
        void ocall_save_file([in, string] const char* filename, [in, size=size] void* content, size_t size);
        void ocall_remove_file([in, string] const char* filename, [out] int* err);
        void ocall_free([user_check] void* mem);
        void ocall_print_string([in, string] const char *str);
        void ocall_print_sgx_error(sgx_status_t sgxstat);
    };
};
